---
mametter:
  title: 'TypeProf for IDE: Enrich Dev-Experience without Annotations'
  type: keynote
  language: JA
  description: Ruby 3.0 comes bundled with TypeProf, a code analysis tool that doesn't
    require so many type annotations. Its primary goal is to create type signatures
    for existing Ruby programs and help users to apply some external type checkers
    like Steep. Since the release, we have made an effort to adapt TypeProf to an
    integrated development environment (IDE), which allows users to enjoy many features
    supported in an IDE, such as browsing method type signatures inferred on the fly,
    find definition, find references, error checking, etc. We demonstrate TypeProf
    for IDE, and present its roadmap.
  speakers:
  - id: mametter
  materials:
  - title: Slides
    url: https://www.slideshare.net/mametter/typeprof-for-ide-enrich-development-experience-without-annotations
  video:
    youtube_id: uNttp63ELoE
k0kubun:
  title: Why Ruby's JIT was slow
  type: presentation
  language: EN & JA
  description: |-
    In Ruby 2.6, we started to use a JIT compiler architecture called "MJIT", which uses a C compiler to generate native code. While it achieved Ruby 3x3 in one benchmark, we had struggled to optimize web application workloads like Rails with MJIT. The good news is we recently figured out why.

    In this talk, you will hear how JIT architectures impact various benchmarks differently, and why it matters for *you*. You may or may not benefit from Ruby's JIT, depending on what JIT architecture we'll choose beyond the current MJIT. Let's discuss which direction we'd like to go.
  speakers:
  - id: k0kubun
  materials:
  - title: Slides
    url: https://speakerdeck.com/k0kubun/rubykaigi-takeout-2021
  video:
    youtube_id: db3GHHllRyQ
jeremyevans0:
  title: Optimizing Partial Backtraces in Ruby 3
  type: presentation
  language: EN
  description: Backtraces are very useful tools when debugging problems in Ruby programs.
    Unfortunately, backtrace generation is expensive for deep callstacks. In older
    versions of Ruby, this is true even if you only want a partial backtrace, such
    as a single backtrace frame. Thankfully, Ruby 3 has been optimized so that it
    no longer processes unnecessary backtrace frames, which can greatly speed up the
    generation of partial backtraces. Join me for an interesting look a Ruby backtraces,
    how they are generated, how we optimized partial backtraces in Ruby 3, and how
    we fixed bugs in the optimization in 3.0.1.
  speakers:
  - id: jeremyevans0
  materials:
  - title: Slides
    url: http://code.jeremyevans.net/presentations/rubykaigi2021/index.html
  video:
    youtube_id: QDbj4Y0E5xo
koic:
  title: 'RuboCop in 2021: Stable and Beyond'
  type: presentation
  language: JA
  description: |-
    RuboCop 1.0 stable version was released last year.

    Well, ​RuboCop v1 provided a background to stable upgrade. On the other hand, RuboCop supports various coding styles and the development is a struggle against false positives and false negatives. So, the improvement must go on.
    This presentation shows behind the scenes of development to make RuboCop and environment surrounding it better. Finally, I will show several ideas for future RuboCop.

    Through this talk, you will know about benefits and considerations for upgrading RuboCop.
  speakers:
  - id: koic
  materials:
  - title: Slides
    url: https://speakerdeck.com/koic/rubocop-in-2021-stable-and-beyond
  video:
    youtube_id: yJF5EKM_zPw
schwad4hd14:
  title: Ruby Archaeology
  type: presentation
  language: EN
  description: "### In 2009 _why tweeted: \"programming is rather thankless. you see
    your works become replaced by superior works in a year. unable to run at all in
    a few more.\"\n\n__I take this as a call to action to run old code.__ In this
    talk we dig, together, through historical Ruby. We will have fun excavating interesting
    gems from the past. \n\nFurther, I will answer the following questions:\n\n* What
    code greater than 12 years old still runs in Ruby 3.0? \n* What idioms have changed?
    \n* _And for the brave_: how can you set up an environment to run Ruby 1.8 code
    from ~2008 on a modern machine?"
  speakers:
  - id: schwad4hd14
  materials:
  - title: Slides
    url: https://schwaderer-kaigi-2021.herokuapp.com/#2
  video:
    youtube_id: qv4XniFPapQ
ko1:
  title: The Art of Execution Control for Ruby's Debugger
  type: presentation
  language: JA
  description: |-
    We introduce `debug.gem` ([ruby/debug: Debugging functionality for Ruby](https://github.com/ruby/debug)), the fastest debugger for Ruby and how to make it.

    Existing debuggers have performance penalty to control execution. `debug.gem` uses recently introduced `TracePoint` features to mange execution and there is (almost) no penalties.

    `debug.gem` has more interesting features:

    * Remote debugging
    * IDE (VSCode) Integration
    * Thread/Ractor support
    * and more

    In this presentation, we introduce newly created `debug.gem` and show the tricks to make the *fastest* debugger.
  speakers:
  - id: ko1
  materials:
  - title: Slides
    url: https://www.atdot.net/~ko1/activities/2021_rubykaigi_takeout.pdf
  video:
    youtube_id: tfXiL5wDA6Q
peterzhu2118:
  title: 'Variable Width Allocation: Optimizing Ruby''s Memory Layout'
  type: presentation
  language: EN
  description: |-
    Ruby’s current memory model assumes all objects live in fixed size slots. This means that object data is often stored outside of the Ruby heap, which has implications: an object's data can be scattered across many locations, increasing complexity and causing poor locality resulting in reduced efficiency of CPU caches.

    Join us as we explore how our Variable Width Allocation project will move system heap memory into Ruby heap memory, reducing system heap allocations and giving us finer control of the memory layout to optimize for performance.
  speakers:
  - id: peterzhu2118
  - id: eightbitraptor
  materials:
  - title: Slides
    url: https://blog.peterzhu.ca/assets/rubykaigi_2021_slides.pdf
  video:
    youtube_id: 7C3bdT6Ri2Q
coe401_:
  title: 'Toycol: Define your own application protocol'
  type: presentation
  language: JA
  description: "TCP/IP is the protocol stack where each layer is independent. \n\nSo
    what is a protocol? - It is a set of rules for communication between network nodes.\nWhat
    if you could change these rules at will? For example, why not change our familiar
    HTTP/1.x to a different communication style?\n\nI’ve created a minimal framework
    that translates the custom toy application protocol for the Web into HTTP/1.x,
    with which you can define the protocol that clients and servers understand.\nIn
    this talk, I'd like to show the flexibility of this framework with some examples
    of both nodes that speak in given protocols."
  speakers:
  - id: coe401_
  materials:
  - title: Slides
    url: https://speakerdeck.com/coe401_/toycol-define-your-own-application-protocol
  video:
    youtube_id: zfuYguzvlbg
vinistock:
  title: 'Parallel testing with Ractors: putting CPUs to work'
  type: presentation
  language: EN
  description: |-
    Parallelizing tests is an opportune way of reducing the total runtime for a test suite. Rails achieves this by forking multiple separate workers that fetch tests from a queue. In Ruby 3, Ractors introduced new mechanisms for executing code in parallel. Can they be leveraged by a test framework? And how would that compare to current parallelization solutions?

    Let’s find the answers to these questions by building a test framework built on Ractors, from scratch. We’ll compare the current solutions for parallelization and what advantages or limitations Ractors bring when used in this context.
  speakers:
  - id: vinistock
  materials:
  - title: Slides
    url: https://speakerdeck.com/vinistock/parallel-testing-with-ractors-putting-cpus-to-work
  video:
    youtube_id: bvFj6_dulSo
m_seki:
  title: dRuby in the real-world embedded systems.
  type: presentation
  language: JA
  description: We will report an example of using dRuby and CRuby (not mruby) in embedded
    software for small medical devices. In this talk, we will discuss the architecture
    of our products.
  speakers:
  - id: m_seki
  - id: t-sono1809
  materials:
  - title: Slides
    url: https://www.druby.org/seki-RK2021.pdf
  video:
    youtube_id: kkXKHPRxeyM
duerst:
  title: 'Regular Expressions: Amazing and Dangerous'
  type: presentation
  language: EN
  description: |-
    Many Ruby programmers use regular expressions frequently. They are an amazingly powerful tool for many different kinds of text processing. However, if not used carefully, they can also be dangerous: They may not exactly match what their writer thinks they match, and they may execute very slowly on certain inputs.
    This talk will help you understand regular expressions better, so that you can make good use of their amazing power while avoiding their dangerous sides. It will also discuss recent changes to Ruby in the area of regular expressions.
  speakers:
  - id: duerst
  materials:
  - title: Slides
    url: https://www.sw.it.aoyama.ac.jp/2021/pub/RubyKaigi/
  video:
    youtube_id: bLzUiOm97Ps
udzura:
  title: Story of Rucy - How to "compile" a BPF binary from Ruby
  type: presentation
  language: EN
  description: |-
    BPF is a technology used in Linux for packet filtering, tracing or access auditing. BPF has its own VM and set of opcodes.

    If you want to write a program that loads and uses BPF binary, you can write it in any language including Ruby.

    However, to prepare a "BPF binary" itself, you generally need to write a bit weird C, and pass it to clang compiler using `bpf` target.

    Wouldn't it be great if we could make these BPF binaries entirely in Ruby?

    Rucy is intended to allow programmers to write their whole BPF programs in Ruby. I'll discuss how to "compile" BPF binaries from Ruby in this talk.
  speakers:
  - id: udzura
  materials:
  - title: Slides
    url: https://speakerdeck.com/udzura/story-of-rucy-on-rubykaigi-takeout-2021
  video:
    youtube_id: qvaXv8exFFQ
paracycle:
  title: Demystifying DSLs for better analysis and understanding
  type: presentation
  language: EN
  description: |-
    The ability to create DSLs is one of the biggest strengths of Ruby. They allow us to write easy to use interfaces and reduce the need for boilerplate code. On the flip side, DSLs encapsulate complex logic which makes it hard for developers to understand what's happening under the covers.

    Surfacing DSLs as static artifacts makes working with them much easier. Generating RBI/RBS files that declare the methods which are dynamically created at runtime, allows static analyzers like Sorbet or Steep to work with DSLs. This also allows for better developers tooling and as some kind of "DSL linter".
  speakers:
  - id: paracycle
  materials:
  - title: Slides
    url: https://speakerdeck.com/ufuk/demystifying-dsls-for-better-analysis-and-understanding
  video:
    youtube_id: Ms7_PrryvMM
yamori813:
  title: Falling down from FreeBSD
  type: presentation
  language: JA
  description: |-
    Introduction of mruby on YABM

    Why I started mruby on YABM(Yet Another Bare Metal). I describe inside of mruby and how to use it. Also I talked about IoT use case.
  speakers:
  - id: yamori813
  materials:
  - title: Slides
    url: https://rubykaigi.org/2021-takeout/data/slides/Falling.pdf
  video:
    youtube_id: JvFCljZeF1w
chrisgseaton:
  title: The Future Shape of Ruby Objects
  type: keynote
  language: EN
  description: TruffleRuby uses an optimisation called object shapes to optimise Ruby.
    It automatically learns and understands the layout and types, or the shape, of
    your objects as your code is running and optimises code to work better with those
    shapes. As the community tries to make MRI faster, it could be time to adopt object
    shapes there as well. We’ll talk about what TruffleRuby does, how it does it,
    and the benefits it achieves in practice.
  speakers:
  - id: chrisgseaton
  materials:
  - title: The Future Shape of Ruby Objects
    url: https://chrisseaton.com/truffleruby/rubykaigi21/
  - title: Slides
    url: https://www.slideshare.net/ChrisSeaton1/the-future-shape-of-ruby-objects
  video:
    youtube_id: RqwVEw-Rd5c
eregontp:
  title: Just-in-Time Compiling Ruby Regexps on TruffleRuby
  type: presentation
  language: EN
  description: |-
    TruffleRuby together with Truffle Regex can now execute Ruby Regexps up to 40 times faster than CRuby!
    This is possible by just-in-time compiling Ruby Regexps to machine code by using Truffle Regex, a Truffle language for regular expressions. Truffle Regex uses finite-state machines, a [much faster](https://swtch.com/~rsc/regexp/regexp1.html) alternative to backtracking regexp engines.
    Because of the unique capability of GraalVM to inline across languages, the Ruby code and the Regexp are optimized and compiled together for ultimate performance.
  speakers:
  - id: eregontp
  - id: djoooooe
  materials:
  - title: Slides
    url: https://eregon.me/blog/assets/research/just-in-time-compiling-ruby-regexps-on-truffleruby.pdf
  video:
    youtube_id: DYPCkR7Ngx8
hasumikin:
  title: 'PRK Firmware: Keyboard is Essentially Ruby'
  type: presentation
  language: JA
  description: |-
    PRK Firmware is the world's first keyboard firmware framework in Ruby.
    You can write not only your own "keymap" in Ruby but also additional behavior by features of Ruby like open class system and Proc object.

    Plus, your keyboard itself interprets a Ruby script on the fly.
    Essentially, your keyboard can become Ruby.

    The ultimate goal is certainly not a small one --- let's make Ruby comparable to projects such as MicroPython, CircuitPython or Lua in terms of viability as a scripting language for microcontrollers.
  speakers:
  - id: hasumikin
  materials:
  - title: Slides
    url: https://slide.rabbit-shocker.org/authors/hasumikin/RubyKaigiTakeout2021/
  video:
    youtube_id: 5unMW_BAd4A
maximecb:
  title: YJIT - Building a new JIT Compiler inside CRuby
  type: presentation
  language: EN
  description: YJIT, an open source project led by a small team of developers at Shopify
    to incrementally build a new JIT compiler inside CRuby. Key advantages are that
    our compiler delivers very fast warm up, and we have complete, fine-grained control
    over the entire code generation pipeline. In this talk, I present the approach
    we are taking to implement YJIT and discuss early performance results. The talk
    will conclude with a discussion of what steps can be taken to unlock higher levels
    of performance for all JIT compilers built inside CRuby, be it YJIT, MJIT or any
    future JIT compiler efforts.
  speakers:
  - id: maximecb
  materials:
  - title: Slides
    url: https://rubykaigi.org/2021-takeout/data/slides/Maxime-YJIT-RubyKaigi-2021-slides.pdf
  video:
    youtube_id: PBVLf3yfMs8
p_ck_:
  title: The newsletter of RBS updates
  type: presentation
  language: JA
  description: |-
    I talk about the RBS updates between Ruby 3.0 and 3.1 in this talk.


    RBS for Ruby 3.1 will be released with many changes. I'll pick up and describe some features for this talk.
  speakers:
  - id: p_ck_
  materials:
  - title: Slides
    url: https://speakerdeck.com/pocke/the-newsletter-of-rbs-updates
  video:
    youtube_id: AwuSHC6j-48
kddnewton:
  title: Parsing Ruby
  type: presentation
  language: EN
  description: Since Ruby's inception, there have been many different projects that
    parse Ruby code. This includes everything from development tools to Ruby implementations
    themselves. This talk dives into the technical details and tradeoffs of how each
    of these tools parses and subsequently understands your applications. After, we'll
    discuss how you can do the same with your own projects using the `Ripper` standard
    library. You'll see just how far we can take this library toward building useful
    development tools.
  speakers:
  - id: kddnewton
  materials:
  - title: Slides
    url: https://speakerdeck.com/kddnewton/parsing-ruby
  video:
    youtube_id: ijPE7k7iW8I
shugomaeda:
  title: include/prepend in refinements should be prohibited
  type: presentation
  language: JA
  description: |-
    include/prepend in refinements are often used to define the same set of methods in multiple refinements.
    However it should be prohibited because it has implementation difficulties such as https://bugs.ruby-lang.org/issues/17007 and https://bugs.ruby-lang.org/issues/17379, and tends to be misleading like https://bugs.ruby-lang.org/issues/17374.

    In this talk, I propose a new feature instead of include/prepend in refinements.
  speakers:
  - id: shugomaeda
  materials:
  - title: include/prepend in refinements should be prohibited
    url: https://github.com/shugo/RubyKaigiTakeout2021
  video:
    youtube_id: b4ls7Y_vZMg
tagomoris:
  title: Ractor's speed is not light-speed
  type: presentation
  language: EN
  description: |-
    Ractor is the new feature, introduced in Ruby 3.0, to run Ruby code on multiple CPU cores. But unfortunately, Ruby 3.0 is not fully ready for actual workloads.
    This session will show how we can improve web-app performance by Ractor, and what we have to do to run our web apps on Ractor.
  speakers:
  - id: tagomoris
  materials:
  - title: Slides
    url: https://www.slideshare.net/tagomoris/ractors-speed-is-not-lightspeed
  video:
    youtube_id: TR_3xFPCGO8
aycabta:
  title: Graphical Terminal User Interface of Ruby 3.1
  type: presentation
  language: EN
  description: |-
    The IRB shipped with Ruby 3.1 provides a dialog window feature on the terminal to achieve autocomplete. This is implemented as a new feature in Reline, which displays a dialog in an interactive user input interface at any time you want.

    In this article, I will show you how to utilize this dialog display feature of Reline, with IRB and the Ruby debugger which is a new feature in Ruby 3.1.
  speakers:
  - id: aycabta
  materials:
  - title: Transcript
    url: https://gist.github.com/aycabta/6057f7edc7f8790c7d1ea38fb663a971
  video:
    youtube_id: xLeLW-p43bc
rubylangorg:
  title: Ruby Committers vs the World
  type: discussion
  language: JA
  description: 'Ruby core committers on stage!

'
  speakers:
  - id: rubylangorg
  materials:
  - title: Slides
    url: https://docs.google.com/presentation/d/1vOlNnRppAKvzm9NXXX8OfnXMP52Du2M3aVttqiq9TJo/preview
  video:
    youtube_id: zQnN1pqK4FQ
dmagliola:
  title: Do regex dream of Turing Completeness?
  type: presentation
  language: EN
  description: |-
    We're used to using Regular Expressions every day for pattern matching and text replacement, but... What can Regexes actually do?
    How far can we push them? Can we implement actual logic with them?

    What if I told you... You can actually implement Conway's Game of Life with just a Regex?
    What if I told you... You can actually implement ANYTHING with just a Regex?

    Join me on a wild ride exploring amazing Game of Life patterns, unusual Regex techniques, Turing Completeness, programatically generating complex Regexes with Ruby, and what all this means for our understanding of what a Regex can do.
  speakers:
  - id: dmagliola
  materials:
  - title: Do Regex dream of Turing Completeness?
    url: https://github.com/dmagliola/regex_game_of_life/
  - title: Slides
    url: https://github.com/dmagliola/regex_game_of_life/blob/main/Slides.pdf
  video:
    youtube_id: hkDZCFBlD5Q
pink_bangbi:
  title: Use Macro all the time ~ マクロを使いまくろ ~
  type: presentation
  language: JA
  description: |-
    Ruby can get AST with `RubyVM::AbstractSyntaxTree`.
    I have implemented to convert AST into Ruby code.
    This will allow you to modify and execute Ruby code at AST level.

    - Ruby code -> Convert to AST -> Convert to another AST -> Convert AST to Ruby code -> Run Ruby code

    In this session, I will discuss "Implementations for converting AST to Ruby code" and "Implementations for converting AST to another AST".
    This feature of "converting to another AST" is similar to what is called a "Macro" in other languages.
    Let's think together about what happens when we implement "Macro" in Ruby.
  speakers:
  - id: pink_bangbi
  materials:
  - title: Slides
    url: https://speakerdeck.com/osyo/use-macro-all-the-time-makurowoshi-imakuro-english
  - title: Slides (Japanese)
    url: https://speakerdeck.com/osyo/use-macro-all-the-time-makurowoshi-imakuro-ri-ben-yu

  video:
    youtube_id: w2B99qYrkX8
MauroEldritch:
  title: Crafting exploits, tools and havoc with Ruby
  type: presentation
  language: EN
  description: "Can I use ruby to ...?\nCreate Websites? Yes\nCreate Applications?
    Yes\nWreak havoc, write exploits, and hack stuff? Of course!\n\nDuring this session
    we will analyze different exploits and tools written in Ruby by the author: from
    scanners and bruteforcers to C2 servers and complex exploits.\n\nEach exploit
    will be explained in a simple and friendly way for newcomers, and different samples
    and libraries will be shared so that anyone interested can start building its
    ruby-powered hacking toolbox. \n\nThere will also be a short lab demo of these
    tools. Take a seat, grab an exploit, hack stuff."
  speakers:
  - id: MauroEldritch
  materials:
  - title: Slides
    url: https://docs.google.com/presentation/d/1Rnqma2C2G4ubAw6SHv7qDBALUYIk8V1sc3p9Y0NcgX4/preview?slide=id.p3
  video:
    youtube_id: LIECErdtTDc
mrkn:
  title: 'Charty: Statistical data visualization in Ruby'
  type: presentation
  language: JA
  description: |-
    Have you ever thought it would be better to make stylish charts by Ruby for daily data visualization tasks that sometimes occur? I will make that wish come true! Using Charty, you can do it by Ruby.

    Charty makes statistical data visualization easier. If you want to put error bars in a bar plot, you must calculate the mean and the 95% confidence interval before plotting. Charty performs these calculations instead of you. Moreover, Charty can recognize many data types as table data and supports files, Jupyter Notebook, JupyerLab, VSCode, and a terminal emulator as the output destination.
  speakers:
  - id: mrkn
  materials:
  - title: Jupyter Notebook
    url: https://nbviewer.jupyter.org/github/mrkn/talks/blob/master/2021/rubykaigi2021-takeout/rubykaigi2021-takeout.ipynb
  video:
    youtube_id: iHOWyQt4y-Q
flavorjones:
  title: Building Native Extensions. This Could Take A While...
  type: presentation
  language: EN
  description: |-
    "Native gems" contain pre-compiled libraries for a specific machine architecture, removing the need to compile the C extension or to install other system dependencies. This leads to a much faster and more reliable installation experience for programmers.

    This talk will provide a deep look at the techniques and toolchain used to ship native versions of Nokogiri and other rubygems with C extensions. Gem maintainers will learn how to build native versions of their own gems, and developers will learn how to use and deploy pre-compiled packages.
  speakers:
  - id: flavorjones
  materials:
  - title: Slides
    url: https://docs.google.com/presentation/d/1litUWFDOfIiMRiM39B-eSG5IcJPUG5aKYAAOZ8rWLT0/preview
  video:
    youtube_id: oktN_CbOJKc
ima1zumi:
  title: Dive into Encoding
  type: presentation
  language: JA
  description: |-
    Each Ruby `String` object has an encoding internally. Therefore, it can use a different encoding in the same application. It's very convenient.
    So, how does Ruby encode a String? What does it mean to have an encoding for each String? As they say, practice makes perfect, so I figured I could understand it by adding self-made encoding.
    This talk would like to try to add self-made encoding in Ruby and see how Ruby handles encodings.
  speakers:
  - id: ima1zumi
  materials:
  - title: Slides
    url: https://speakerdeck.com/ima1zumi/dive-into-encoding
  video:
    youtube_id: 9PA6twS9Oq4
schneems:
  title: Beware the Dead End!!
  type: presentation
  language: EN
  description: Nothing stops a program from executing quite as fast as a syntax error.
    After years of “unexpected end” in my dev life, I decided to “do” something about
    it. In this talk we'll cover lexing, parsing, and indentation informed syntax
    tree search that power that `dead_end` Ruby library.
  speakers:
  - id: schneems
  materials:
  - title: Slides
    url: https://speakerdeck.com/schneems/beware-the-dead-end
  video:
    youtube_id: oL_yxJN8534
hsbt:
  title: How to develop the Standard Libraries of Ruby?
  type: presentation
  language: JA
  description: |-
    I maintain the RubyGems, Bundler and the standard libraries of the Ruby language. So, I've been extract many of the standard libraries to default gems and GitHub at Ruby 3.0. But the some of libraries still remains in only Ruby repository. I will describe these situation.

    So, Rubyists can submit a pull-request for the default gems like net-http, irb or etc after Ruby 3.0. We need to learn about the mechanism of the default gems. and also learn the bundled gems. I will describe a technic for developing the standard libraries with GitHub..
  speakers:
  - id: hsbt
  materials:
  - title: Slides
    url: https://www.slideshare.net/hsbt/how-to-develop-the-standard-libraries-of-ruby
  video:
    youtube_id: 0yZ2fle1zTo
elct9620:
  title: It is time to build your mruby VM on the microcontroller?
  type: presentation
  language: EN
  description: In 2020, I find a mini-arcade maker product that uses ESP8622 and MicroPython.
    Since I know the mruby/c can run on the ESP32 but it doesn't support running on
    the ESP8622. Is it possible to implement our own mruby VM and execute Ruby on
    any microcontroller we want to use it? This talk will show my progress to run
    a simple mruby script on the ESP8622 by implementing my own small mruby VM.
  speakers:
  - id: elct9620
  materials:
  - title: Slides
    url: https://speakerdeck.com/elct9620/2021-rubykaigi-it-is-time-to-build-your-mruby-vm-on-the-microcontroller
  video:
    youtube_id: IqZW3i7HbmY
yu_suke1994:
  title: Ruby, Ractor, QUIC
  type: presentation
  language: JA
  description: |-
    From Ruby 3, a parallel processing mechanism called Ractor has been introduced. This has made it easy to implement safe parallel processing in Ruby.
    In addition, QUIC, which was announced by Google in 2013, standardized in May 2021, and will be used more and more in the future.
    In this presentation, I will explain what QUIC is, whether it is possible to implement a QUIC server and client with Ractor introduced in Ruby 3, and if so, why it is difficult or impossible.
  speakers:
  - id: yu_suke1994
  materials:
  - title: Slides
    url: https://slide.rabbit-shocker.org/authors/unasuke/rubykaigi-takeout-2021/
  video:
    youtube_id: 9da7QccHXV4
matschaffer:
  title: 10 years of Ruby-powered citizen science
  type: presentation
  language: EN
  description: |-
    In the wake of the 2011 Tohoku earthquake and tsunami, people were worried for their safety. Safecast answered that call and went on to the largest open radiation database in the world.

    10 years later our science project continues, with Ruby at its heart. Our radiation measurements span the globe and are freely available for anyone to use. And now with projects like Airnote we’re using that expertise to tackle new environmental challenges such as the California wildfires.
  speakers:
  - id: matschaffer
  materials:
  - title: Slides
    url: https://www.dropbox.com/s/948r8vazc7ie5y4/RubyKaigi2021-10yrs-ruby-powered-citizen-science.pdf?dl=0
  video:
    youtube_id: Jg8PY00HDnA
ktou:
  title: Red Arrow - Ruby and Apache Arrow
  type: presentation
  language: JA
  description: |-
    To use Ruby for data processing widely, [Apache Arrow](https://arrow.apache.org/) support is important. We can do the followings with Apache Arrow:

      * Super fast large data interchange and processing
      * Reading/writing data in several famous formats such as CSV and Apache Parquet
      * Reading/writing partitioned large data on cloud storage such as Amazon S3

    This talk describes the followings:

      * What is Apache Arrow
      * How to use Apache Arrow with Ruby
      * How to integrate with Ruby 3.0 features such as MemoryView and Ractor
  speakers:
  - id: ktou
  materials:
  - title: Slides
    url: https://slide.rabbit-shocker.org/authors/kou/rubykaigi-takeout-2021/
  video:
    youtube_id: okXiuYiP2C4
yukihiro_matz:
  title: Matz Keynote
  type: keynote
  language: JA
  description: Matz Keynote
  speakers:
  - id: yukihiro_matz
  materials:
  - title: Slides
    url: https://drive.google.com/file/d/1goaSTy5M58m-odqlZHpQVCme9hvUAkRw/view
  video:
    youtube_id: QQASprf5EGw
